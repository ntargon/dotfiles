#buf = psutil.Process(os.getppid()).name()
#if buf.find('Atom Helper') == 0:
#    $PATH.append('/usr/local/bin')
#
#xontrib load powerline




# エディタ
$EDITOR = '/usr/local/bin/vim'
$VISUAL = '/usr/local/bin/vim'
# vi風の操作がシェル上で直感的でないのでFalse
$VI_MODE = False
# 補完をEnterで直接実行しない
$COMPLETIONS_CONFIRM = True
# Ctrl + D で終了しない
$IGNOREEOF = True
# tabではなく空白4つ
$INDENT = "    "
# 補完時に大小区別しない
$CASE_SENSITIVE_COMPLETIONS = False
# 連続重複コマンドを保存しない
$HISTCONTROL = {'ignoredups', 'ignoreerr'}
#$HISTCONTROL = "ignoredups"{'ignoredups', 'ignoreerr'}
# 括弧を補完
$XONSH_AUTOPAIR = True
# ディレクトリ名を入力でcd
$AUTO_CD = True
# エラー全て吐くように
$XONSH_SHOW_TRACEBACK = True
# サブプロセスタイムアウトのメッセージ抑制
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
# キー入力即評価（サイコー）
$UPDATE_COMPLETIONS_ON_KEYPRESS = False
# プロンプトの表記(変更する)
$XONSH_GITSTATUS_CHANGED='{RED}*'
$XONSH_GITSTATUS_STAGED='{RED}+'
dir = '{cwd}'
# $PROMPT = "{BOLD_GREEN}{user}{BOLD_GREEN}:$(dir){cwd.split('/')[-1]} {gitstatus}{WHITE}$ "
# $PROMPT = "{BOLD_GREEN}{user}{BOLD_GREEN}@{BOLD_GREEN}{hostname}{BOLD_BLUE}:{cwd} {gitstatus}{WHITE}$ "
$PROMPT = "{BOLD_GREEN}{user}:{BOLD_BLUE}{short_cwd} {gitstatus}{WHITE}$ "
# lsコマンドの結果の見た目
#$LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30"

# alias
# OS判別をplatformで
#import platform
#if platform.system() == 'Darwin':
#    # Mac(iTerm2のimgcat)
#    aliases['icat'] = 'imgcat'
#else:
#    aliases['f'] = 'free -h'
#    aliases['wf'] = 'watch free -h'
#    aliases['tm'] = 'tmux'
aliases['ls'] = "ls --color=auto"
aliases["l"] = "ls -l"
aliases["lf"] = "ls -f"
aliases["ld"] = "ls -d"
aliases["la"] = "ls -la"
aliases["ll"] = "ls -l"
aliases["v"] = "vim"
aliases["vi"] = "vim"
aliases["vx"] = "vim ~/.xonshrc"
aliases["vv"] = "vim ~/.vimrc"
aliases["vb"] = "vim ~/.bashrc"
aliases["c"] = "xsel -bi"
aliases["jn"] = "jupyter notebook"
#aliases["tarc"] = "tar -zcvf"
aliases["tarx"] = "tar -zxvf"
aliases["chrome"] = "google-chrome"
aliases["tarc"] = "_tarc.sh"
aliases["vm"] = "vim ~/.vmemo"
aliases["vh"] = "python -i ~/workspaces/pyplot_test/test_data/viewer_himac.py"






# 直近のxonshjobころすマン
# https://github.com/zardus/xonshrc/blob/master/xonshrc
def _kill_last(args, stdin=None):
	if __xonsh_active_job__ is None:
		print("No active job. Aborting.")
		return
	cmd = 'kill %s %d' % (''.join(args), __xonsh_all_jobs__[__xonsh_active_job__]['pgrp'])
	os.system(cmd)
aliases['kill_last'] = _kill_last

# diskutil infoを見る
# https://github.com/asmeurer/dotfiles/blob/master/.xonshrc
def _free(args, stdin=None):
    disk_info = $(diskutil info /)
    return [i for i in disk_info.splitlines() if "Free" in i][0] + '\n'
aliases['fr'] = _free

# gc
import gc
def _gc(args, stdin=None):
    gc.collect()
aliases['gc'] = _gc

# ライブラリの実行時import
# https://vaaaaaanquish.hatenablog.com/entry/2017/12/26/190153
# xonsh上で使うときがありそうなライブラリはlazyasdで補完時、実行時に読み込み
from xonsh.lazyasd import lazyobject
import importlib
lazy_module_dict = {
    'sys': 'sys',
    'random': 'random',
    'shutil': 'shutil',
    'pd': 'pandas',
    'np': 'numpy',
    'requests': 'requests',
    'os': 'os',
    'plt': 'matplotlib.pyplot',
    'Path': 'pathlib.Path',
        }
for k,v in lazy_module_dict.items():
    t = "@lazyobject\ndef {}():\n    return importlib.import_module('{}')".format(k, v)
    exec(t)


tmux
